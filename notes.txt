Magesh Kuppan
https://in.linkedin.com/in/tkmagesh

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodology:
    * No powerpoints
    * 100% hands-on driven class
    * At least 50% of the class should have solved the assignments for us to continue
    * Be prepared to showcase your assignment solution

Github Repo:
    https://github.com/tkmagesh/IBM-Go-Nov-2022

Etiquitte:
    * No allocated time for Q&A
    * Interuptions are most welcome
    * Inform if you leave the class for any reason

About You:
    Name
    Experience
    Primary Skillset
    Experience in Golang (if any)

Why Go?
    1. Simplicity
    2. Resource light
    3. Error Handling
    4. Concurrency

    1. Simplicity
        Only 25 keywords
        * No access modifiers (No public, private, protected etc)
        * No Classes (only structs)
        * No inheritance (only composition)
        * No Exceptions (only errors [values])
        * No "try catch finally"
        * No reference types (everything is a value in go)
        * No pointer arithmetic
        * No implicit type conversion
        * Has a builtin Garbage Collector

    2. Light Weight
        - Compiles to Native Code
        - No need for app servers
        - Performance on par with C++

    3. Concurrency
        - Goroutine (4 KB) / OS Thread (2 MB on linux)
            1000s of goroutines using fewer OS thread(s)
        - Has a builtin Scheduler to schedule the goroutines
        - Concurrency features are built in the language
            "go" keyword, "chan" data type, "range" & "select case" constructs
        - SDK support
            sync package
            sync/atomic package

Paradox of Choice (Barry Schwartz)

Software Requirements
    Go tools 
        (https://go.dev/dl)
        Verification : go version

    Visual Studio Code 
        (https://code.visualstudio.com)

    Go extension for Visual Studio Code 
        (https://marketplace.visualstudio.com/items?itemName=golang.Go)
        
    Configure the Go extension tools In Visual Studio Code
        Ctrl/Cmd + Shift + P
        Go: Install/Update Tools
        Select all the checkboxes and press OK


    Documentation for GO Standard Library
        https://pkg.go.dev/std

    To run a go program
        go run <program.go>

    To create a build
        go build <program.go>
        go build -o <buildname> <program.go>    

    To execute the build 
        In mac -> ./<buildname>
        IN windows -> <buildname> 

    To list all the environment variables
        go env

    To get the value of the given environment variables
        go env <env_variable>
        go env <env_variable-1> <env_variable-2>

    To change the environment variables
        go env -w <env_variable-1>=<value_1> <env_variable-2>=<value_2>

    Envrionment Variables for Cross Compilation
        GOOS & GOARCH
    
    To get the list of platforms for cross compilation
        go tool dist list 
            (will list the possible combination of GOOS/GOARCH)
    
    On Mac & Linux
        GOOS=windows GOARCH=386 go build <program.go>


Data types 
    string
    bool

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real [float32] + imaginary [float32])
    complex128 (real [float64] + imaginary [float64])

    byte (alias for uint8)
    rune (alias for int32) (unicode code point)

Constructs
    if else
    switch case
    for 
    func (function)

Assignment-1:  
    Print all the prime numbers between 3 and 100

Assignment-2:
    Display the following menu
		1. Add
		2. Subtract
		3. Multiply
		4. Divide
		5. Exit
	Accept the user choice
	If the user choice is 1 - 4
		accept 2 numbers from the user
		perform the corresponding operation
		print the result
		display the menu again

	If the user choice = 5
		print "Thank you"
		exit the application

	If the user choice is NOT 1 - 5
		print "Invalid choice"
		display the menu again


Functions
    variadic functions
    anonymous functions
    higher order functions (functions are first class objects)
        1. assign a function as a value to a variable
        2. pass a function as an argument to another function
        3. return a function as a return value from another function


Assignment-03:
    Refactor the solution for assignment-02 using functions
        NOTE: make sure that each function follows SRP (Single Responsibility Principle)

Collections
    Array
        Fixed size collection of data of the same type

    Slice
        Variable size collection of data of the same type
        A pointer to an array

    Map
        collection of key-value pairs

Modularity
    Before Go 1.13:
        GOPATH
            /bin
                contains all the binaries of the go command line tools
            /pkg
                code of the 3rd packages
            /src
                /github.com
                    /tkmagesh
                        /my-app
                            import "github.com/tkmagesh/pkg-1"
                            app.go
                        /pkg-1
                            code.go
                        /pkg-2
                            code.go

    In Go 1.13 Modules were introduced
    go.mod
        name of the module
            ADVISABE to have the complete repo path as the module name

        minimum go version
        3rd party dependencies

    To create a module
        go mod init <module_name>

    To execute a module
        go mod .

    To create a build of a module
        go build .
        go build -o <binary_name> .

    To install the 3rd party Modules
        go get <module_name>
        go get github.com/fatih/color

    To sync the package details in go.mod file
        go mod tidy

    To download the dependencies in the go.mod file to the module cache
        go mod download

    To localize the dependencies
        go mod vendor adfdf

    Other use go mod commands
        go mod graph
        go mod why github.com/mattn/go-colorable
        go mod verify

    Reference:
        https://go.dev/ref/mod


Concurrency
    What is concurrency?
        Ability to have more than one execution path 
        NOTE: these execution paths may/may not be executed at the same time
        Concurrency is NOT parallelism
            But Concurrency is needed for parallelism

        Traditionaly, concurrency is achieved using OS threads
            OS Threads are costly (2MB RAM in linux)
            Creation and destruction of threads are costly (thats why we use thread pools)
            Thread context switches are costly

    Cooperative Multitasking
    Preemptive Multitasking

    DO NOT assume the following:
        Time taken for a goroutine to complete

    To detect data race
        go run --race 06-demo.go

    To create a build with race detector (DONOT create production build with race detector)
        go build --race 06.demo.go 


    Channels
        - data type to enable communication between goroutines
        - are typed
        - Send and Receive data using channel operator ( <- )
        - Usage:
            var ch chan int
            ch = make(chan int)
            ch <- 100 (SEND OPERATION)
            <- ch (RECEIVE OPERATION)
        - Behavior
            * A RECEIVE operation is ALWAYS a blocking operation
                in other words, a RECEIVE operation can be successful ONLY if a SEND operation is already initiated
                
            * A SEND operation is blocked until a receive operation is initiated (conditions apply)
                in other words, a SEND operation can be successful ONLY if a RECEIVE operation is already initiated


yamlv2 "gopkg.in/yaml.v2"

